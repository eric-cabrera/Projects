{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.Hosting.Lifetime": "Warning",
      "Microsoft.EntityFrameworkCore": "Error"
    }
  },

  "Environment": "Local",

  "ConnectionStrings": {
    "DataStoreConnectionString": "Server=dmdev;Initial Catalog=DataStore;Integrated Security=true; TrustServerCertificate=true;",
    "LifeProConnectionString": "Server=lpsqldev;Initial Catalog=LPDEV;Integrated Security=true; TrustServerCertificate=true;",
    "GlobalDataConnectionString": "Server=datamartd1;Database=GlobalData;Integrated Security=True;TrustServerCertificate=true;",
    "SupportDataConnectionString": "Server=datamartd1;Database=SupportData;Integrated Security=True;TrustServerCertificate=true;"
  },

  "Cache": {
    "UseTls": "false",
    "MongoDbConnectionString": "mongodb://localhost:27017/?readPreference=primary&ssl=false",
    "MongoDbDatabaseName": "Events",
    "MongoDBPolicyCollectionName": "Policies",
    "MongoDbPolicyHierarchyCollectionName": "PolicyHierarchy",
    "MongoDbAgentPolicyAccessCollectionName": "AgentPolicyAccess",
    "MongoDbRequirementMappingCollectionName": "RequirementMapping",
    "MongoDbBenefitOptionsMappingCollectionName": "BenefitOptionsMapping",
    "MongoDbClientCertificatePassword": "MongoDbClientCertificatePassword",
    "MongoDbPPOLCEventsCollectionName": "PPOLC_Events"
  },

  "Kafka": {
    // ID of this instance. Please change to something unique if using locally.
    "ClientId": "assurity-local-transform-client1",

    // Group of instances that this app will belong to at runtime
    "GroupId": "assurity-connect-local-transform",

    // Options are Earliest or Latest
    "AutoOffsetReset": "0", // 0=Latest, 1=Earliest, 2=Error

    // Points to specific broker(s) on our Confluent cloud
    "SslCaLocation": "confluent_cloud_cacert.pem",
    // DEV
    "BootstrapServers": "pkc-pgq85.us-west-2.aws.confluent.cloud:9092",
    "SaslUsername": "SZDYU6K3FEEDE6DK",
    "SaslPassword": "u06Nw1G3fEs6e98o567+LENP97laJBqB9XK3ZS7OqAqWGV6WpV4LMAFEO0cM2yna",
    "SchemaRegistryURL": "https://psrc-4xgzx.us-east-2.aws.confluent.cloud",
    "SchemaRegistryBasicAuthUserInfo": "YMZBHGKODXVNB223:6UgVngXKcMTZFivqTQBem7OfpfVKYGne+vD4D29ZTtAoXzrvTa8NXe1e7g8skEpC",
    // TEST
    // "BootstrapServers": "pkc-ymrq7.us-east-2.aws.confluent.cloud:9092",
    // "SaslUsername": "OWOE6KIWUJ52TJGC",
    // "SaslPassword": "BAx3KxAKPruIiD9GoZllw/x0EjVfkJgG7oVy4cVnkXqR4b+emPcDrWzny12RvyUX",
    // "SchemaRegistryURL": "https://psrc-zj6ny.us-east-2.aws.confluent.cloud",
    // "SchemaRegistryBasicAuthUserInfo": "YDOVEBZRWCI7JBOB:u4bqjTxIUtFcumAcm5KTsDMGcogyumhA84PS+6Xl2yFXShavEFSlMDiBekIWWMfl",

    // Topics to consume. Comma separated list.
    "Topics": "Topic.PPOLC,Topic.PPEND_NEW_BUSINESS_PENDING,Topic.PRELA_RELATIONSHIP_MASTER,Topic.PCOMC_COMMISSION_CONTROL_TYPE_S,Topic.PCOMC_COMMISSION_CONTROL,Topic.PMUIN_MULTIPLE_INSUREDS,Topic.PNALK,Topic.PPBEN_POLICY_BENEFITS,Topic.PPBEN_POLICY_BENEFITS_TYPES_BA_OR,Topic.PPBEN_POLICY_BENEFITS_TYPES_BF,Topic.PPBEN_POLICY_BENEFITS_TYPES_SL,Topic.PPBEN_POLICY_BENEFITS_TYPES_SP,Topic.PPBEN_POLICY_BENEFITS_TYPES_SU,Topic.PMEDR,Topic.PRQRM,Topic.PRQRMTBL,Topic.PPEND_NEW_BUS_PEND_UNDERWRITING,Topic.PAGNT_AGENT_MASTER,Topic.PGRUP_GROUP_MASTER,Topic.PPOLM_POLICY_BENEFIT_MISC,Topic.PNAME,Topic.PADDR,Topic.SysACAgentData,Topic.SysACAgentMarketCodes,Topic.SysZ9Process,Topic.QUEUES,Topic.SysNBRequirements,Topic.PACTG,Topic.PBDRV,Topic.PACON_ANNUITY_POLICY",

    // Topic names of topics that this app will process if set in the 'Topics' config var. These can be env specific.
    "Topic.PPOLC": "sink-PPOLC-EVENT",
    "Topic.PNAME": "sink-PNAME-EVENT",
    "Topic.PADDR": "sink-PADDR-EVENT",
    "Topic.PPEND_NEW_BUSINESS_PENDING": "sink-PPEND_NEW_BUSINESS_PENDING-EVENT",
    "Topic.PRELA_RELATIONSHIP_MASTER": "sink-PRELA_RELATIONSHIP_MASTER-EVENT",
    "Topic.PCOMC_COMMISSION_CONTROL_TYPE_S": "sink-PCOMC_COMMISSION_CONTROL_TYPE_S-EVENT",
    "Topic.PCOMC_COMMISSION_CONTROL": "sink-PCOMC_COMMISSION_CONTROL-EVENT",
    "Topic.PMUIN_MULTIPLE_INSUREDS": "sink-PMUIN_MULTIPLE_INSUREDS-EVENT",
    "Topic.PNALK": "sink-PNALK-EVENT",
    "Topic.PPBEN_POLICY_BENEFITS": "sink-PPBEN_POLICY_BENEFITS-EVENT",
    "Topic.PPBEN_POLICY_BENEFITS_TYPES_BA_OR": "sink-PPBEN_POLICY_BENEFITS_TYPES_BA_OR-EVENT",
    "Topic.PPBEN_POLICY_BENEFITS_TYPES_BF": "sink-PPBEN_POLICY_BENEFITS_TYPES_BF-EVENT",
    "Topic.PPBEN_POLICY_BENEFITS_TYPES_SL": "sink-PPBEN_POLICY_BENEFITS_TYPES_SL-EVENT",
    "Topic.PPBEN_POLICY_BENEFITS_TYPES_SP": "sink-PPBEN_POLICY_BENEFITS_TYPES_SP-EVENT",
    "Topic.PPBEN_POLICY_BENEFITS_TYPES_SU": "sink-PPBEN_POLICY_BENEFITS_TYPES_SU-EVENT",
    "Topic.ProductDescription": "pksqlc-d1yn1ProductDescription",
    "Topic.PMEDR": "sink-PMEDR-EVENT",
    "Topic.PRQRM": "sink-PRQRM-EVENT",
    "Topic.PRQRMTBL": "sink-PRQRMTBL-EVENT",
    "Topic.PPEND_NEW_BUS_PEND_UNDERWRITING": "sink-PPEND_NEW_BUS_PEND_UNDERWRITING-EVENT",
    "Topic.PAGNT_AGENT_MASTER": "sink-PAGNT_AGENT_MASTER-EVENT",
    "Topic.PGRUP_GROUP_MASTER": "sink-PGRUP_GROUP_MASTER-EVENT",
    "Topic.PPOLM_POLICY_BENEFIT_MISC": "sink-PPOLM_POLICY_BENEFIT_MISC-EVENT",
    "Topic.PHIER_AGENT_HIERARCHY": "sink-PHIER_AGENT_HIERARCHY-EVENT",
    "Topic.SysNBRequirements": "sink-sysNBRequirements-EVENT",
    "Topic.SysACAgentData": "sink-sysACAgentData-EVENT",
    "Topic.SysACAgentMarketCodes": "sink-sysACAgentMarketCodes-EVENT",
    "Topic.SysZ9Process": "sink-sysZ9Process-EVENT",
    "Topic.QUEUES": "sink-QUEUES-EVENT",
    "Topic.PACTG": "sink-PACTG-EVENT",
    "Topic.PBDRV": "sink-PBDRV-EVENT",
    "Topic.PACON_ANNUITY_POLICY": "sink-PACON_ANNUITY_POLICY-EVENT",

    // These should remain unchanged unless we are directly addressing 
    // commit, partitioning management or performance issues.
    "EnableAutoOffsetStore": "true",
    "PartitionAssignmentStrategy": "1", // 0=Range,1=RoundRobin,2=CooperativeSticky
    "KafkaConsumerFailRetry": "5", // secs, control the time to pause between consumer close/reconnect recovery
    "KafkaSlowConsumerUpdateThreshold": "25", // For PADDR, PNAME and PNALK Number of policy updates an event will do before going into slow consumer mode
    "DeadLetterTopicName": "ConsumerDeadLetter",
    "KafkaDebug": "", // comma-separated list of debug lvls: Consumer: "consumer,cgrp,topic,fetch"  Producer : "broker,topic,msg"
    "KafkaFetchMaxBytes": "52428800",
    "KafkaMaxPartitionFetchBytes": "128", // Default 1048576. But lower for local dev so it switches partitions a lot.
    "KafkaQueuedMaxMessagesKilobytes": "65536",
    "KafkaMessageMaxBytes": "1000000",
    "LogOffsetInfoIntervalSec": "20",
    "ReturnPaymentRetentionDuration": 45,
    "TerminationRetentionYears": 3
  },
  "NLog": {
    "removeLoggerFactoryFilter": false,
    "autoReload": true,
    "throwExceptions": false,
    "internalLogLevel": "Off",
    "internalLogFile": "${basedir}/internal-nlog.txt",
    "extensions": [
      { "assembly": "NLog.Web.AspNetCore" },
      { "assembly": "NLog.Extensions.Logging" }
    ],
    "variables": {
      "applicationName": "Assurity.KafkaConsumer.WorkerService",
      "consoleLogLevel": "Info",
      "newrelicLogLevel": "Off",
      "newRelicLogUrl": "https://log-api.newrelic.com/log/v1",
      "newRelicApiKey": "fc1277e93c19012326c911c5650fc1afFFFFNRAL"
    },
    "time": {
      "type": "AccurateUTC"
    },
    "default-wrapper": {
      "type": "AsyncWrapper",
      "overflowAction": "Block"
    },
    "targets": {
      "async": true,
      "writeBuffer": true,
      "logConsole": {
        "type": "Console",
        "layout": "${MicrosoftConsoleLayout}"
      },
      "logNewRelic": {
        "type": "WebService",
        "url": "${newRelicLogUrl}",
        "protocol": "JsonPost",
        "headers": [
          {
            "name": "Api-Key",
            "layout": "${newRelicApiKey}"
          }
        ],
        "parameters": [
          {
            "name": "",
            "layout": {
              "type": "JsonLayout",
              "attributes": [
                {
                  "name": "applicationName",
                  "layout": "${appDomain:format={1\\}}"
                },
                {
                  "name": "environment",
                  "layout": "${configsetting:item=Environment}"
                },
                {
                  "name": "exception",
                  "layout": "${exception:format=ToString}"
                },
                {
                  "name": "hostname",
                  "layout": "${hostname}"
                },
                {
                  "name": "level",
                  "layout": "${level}"
                },
                {
                  "name": "logger",
                  "layout": "${logger}"
                },
                {
                  "name": "message",
                  "layout": "${message}"
                },
                {
                  "name": "remoteAddress",
                  "layout": "${aspnet-request-ip:CheckForwardedForHeader=true}"
                },
                {
                  "name": "requestMethod",
                  "layout": "${aspnet-request-method}"
                },
                {
                  "name": "requestUrl",
                  "layout": "${aspnet-request-url}"
                },
                {
                  "name": "timestamp",
                  "layout": "${date:universalTime=true:format=O}"
                },
                {
                  "name": "context",
                  "layout": {
                    "type": "JsonLayout",
                    "attributes": [
                      {
                        "name": "event",
                        "layout": {
                          "type": "JsonLayout",
                          "includeEventProperties": true
                        }
                      },
                      {
                        "name": "scope",
                        "layout": {
                          "type": "JsonLayout",
                          "includeScopeProperties": true
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "rules": [
      {
        "logger": "*",
        "minLevel": "${consoleLogLevel}",
        "writeTo": "logConsole"
      },
      {
        "logger": "*",
        "minLevel": "${newrelicLogLevel}",
        "writeTo": "logNewRelic"
      }
    ]
  }
}